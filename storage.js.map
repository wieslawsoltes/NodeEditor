{
  "version": 3,
  "sources": ["../webapp/modules/storage/indexedDb.ts", "../webapp/modules/storage/storageItem.ts", "../webapp/modules/storage/storageProvider.ts"],
  "sourcesContent": ["class InnerDbConnection {\r\n    constructor(private readonly database: IDBDatabase) { }\r\n\r\n    private openStore(store: string, mode: IDBTransactionMode): IDBObjectStore {\r\n        const tx = this.database.transaction(store, mode);\r\n        return tx.objectStore(store);\r\n    }\r\n\r\n    public async put(store: string, obj: any, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        const os = this.openStore(store, \"readwrite\");\r\n\r\n        return await new Promise((resolve, reject) => {\r\n            const response = os.put(obj, key);\r\n            response.onsuccess = () => {\r\n                resolve(response.result);\r\n            };\r\n            response.onerror = () => {\r\n                reject(response.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    public get(store: string, key: IDBValidKey): any {\r\n        const os = this.openStore(store, \"readonly\");\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const response = os.get(key);\r\n            response.onsuccess = () => {\r\n                resolve(response.result);\r\n            };\r\n            response.onerror = () => {\r\n                reject(response.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    public async delete(store: string, key: IDBValidKey): Promise<void> {\r\n        const os = this.openStore(store, \"readwrite\");\r\n\r\n        return await new Promise((resolve, reject) => {\r\n            const response = os.delete(key);\r\n            response.onsuccess = () => {\r\n                resolve();\r\n            };\r\n            response.onerror = () => {\r\n                reject(response.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    public close() {\r\n        this.database.close();\r\n    }\r\n}\r\n\r\nclass IndexedDbWrapper {\r\n    constructor(private readonly databaseName: string, private readonly objectStores: [string]) {\r\n    }\r\n\r\n    public async connect(): Promise<InnerDbConnection> {\r\n        const conn = window.indexedDB.open(this.databaseName, 1);\r\n\r\n        conn.onupgradeneeded = event => {\r\n            const db = (event.target as IDBRequest<IDBDatabase>).result;\r\n            this.objectStores.forEach(store => {\r\n                db.createObjectStore(store);\r\n            });\r\n        };\r\n\r\n        return await new Promise((resolve, reject) => {\r\n            conn.onsuccess = event => {\r\n                resolve(new InnerDbConnection((event.target as IDBRequest<IDBDatabase>).result));\r\n            };\r\n            conn.onerror = event => {\r\n                reject((event.target as IDBRequest<IDBDatabase>).error);\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport const fileBookmarksStore: string = \"fileBookmarks\";\r\nexport const avaloniaDb = new IndexedDbWrapper(\"AvaloniaDb\", [\r\n    fileBookmarksStore\r\n]);\r\n", "import { avaloniaDb, fileBookmarksStore } from \"./indexedDb\";\r\n\r\nexport class StorageItem {\r\n    constructor(public handle: FileSystemHandle, private readonly bookmarkId?: string) { }\r\n\r\n    public get name(): string {\r\n        return this.handle.name;\r\n    }\r\n\r\n    public get kind(): string {\r\n        return this.handle.kind;\r\n    }\r\n\r\n    public static async openRead(item: StorageItem): Promise<Blob> {\r\n        if (!(item.handle instanceof FileSystemFileHandle)) {\r\n            throw new Error(\"StorageItem is not a file\");\r\n        }\r\n\r\n        await item.verityPermissions(\"read\");\r\n\r\n        const file = await item.handle.getFile();\r\n        return file;\r\n    }\r\n\r\n    public static async openWrite(item: StorageItem): Promise<FileSystemWritableFileStream> {\r\n        if (!(item.handle instanceof FileSystemFileHandle)) {\r\n            throw new Error(\"StorageItem is not a file\");\r\n        }\r\n\r\n        await item.verityPermissions(\"readwrite\");\r\n\r\n        return await item.handle.createWritable({ keepExistingData: true });\r\n    }\r\n\r\n    public static async getProperties(item: StorageItem): Promise<{ Size: number; LastModified: number; Type: string } | null> {\r\n        const file = item.handle instanceof FileSystemFileHandle &&\r\n            await item.handle.getFile();\r\n\r\n        if (!file) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            Size: file.size,\r\n            LastModified: file.lastModified,\r\n            Type: file.type\r\n        };\r\n    }\r\n\r\n    public static async getItems(item: StorageItem): Promise<StorageItems> {\r\n        if (item.handle.kind !== \"directory\") {\r\n            return new StorageItems([]);\r\n        }\r\n\r\n        const items: StorageItem[] = [];\r\n        for await (const [, value] of (item.handle as any).entries()) {\r\n            items.push(new StorageItem(value));\r\n        }\r\n        return new StorageItems(items);\r\n    }\r\n\r\n    private async verityPermissions(mode: FileSystemPermissionMode): Promise<void | never> {\r\n        if (await this.handle.queryPermission({ mode }) === \"granted\") {\r\n            return;\r\n        }\r\n\r\n        if (await this.handle.requestPermission({ mode }) === \"denied\") {\r\n            throw new Error(\"Permissions denied\");\r\n        }\r\n    }\r\n\r\n    public static async saveBookmark(item: StorageItem): Promise<string> {\r\n        // If file was previously bookmarked, just return old one.\r\n        if (item.bookmarkId) {\r\n            return item.bookmarkId;\r\n        }\r\n\r\n        const connection = await avaloniaDb.connect();\r\n        try {\r\n            const key = await connection.put(fileBookmarksStore, item.handle, item.generateBookmarkId());\r\n            return key as string;\r\n        } finally {\r\n            connection.close();\r\n        }\r\n    }\r\n\r\n    public static async deleteBookmark(item: StorageItem): Promise<void> {\r\n        if (!item.bookmarkId) {\r\n            return;\r\n        }\r\n\r\n        const connection = await avaloniaDb.connect();\r\n        try {\r\n            await connection.delete(fileBookmarksStore, item.bookmarkId);\r\n        } finally {\r\n            connection.close();\r\n        }\r\n    }\r\n\r\n    private generateBookmarkId(): string {\r\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n    }\r\n}\r\n\r\nexport class StorageItems {\r\n    constructor(private readonly items: StorageItem[]) { }\r\n\r\n    public static itemsArray(instance: StorageItems): StorageItem[] {\r\n        return instance.items;\r\n    }\r\n}\r\n", "import { avaloniaDb, fileBookmarksStore } from \"./indexedDb\";\r\nimport { StorageItem, StorageItems } from \"./storageItem\";\r\n\r\ndeclare global {\r\n    type WellKnownDirectory = \"desktop\" | \"documents\" | \"downloads\" | \"music\" | \"pictures\" | \"videos\";\r\n    type StartInDirectory = WellKnownDirectory | FileSystemHandle;\r\n    interface OpenFilePickerOptions {\r\n        startIn?: StartInDirectory;\r\n    }\r\n    interface SaveFilePickerOptions {\r\n        startIn?: StartInDirectory;\r\n    }\r\n}\r\n\r\nexport class StorageProvider {\r\n    public static async selectFolderDialog(\r\n        startIn: StorageItem | null): Promise<StorageItem> {\r\n        // 'Picker' API doesn't accept \"null\" as a parameter, so it should be set to undefined.\r\n        const options: DirectoryPickerOptions = {\r\n            startIn: (startIn?.handle ?? undefined)\r\n        };\r\n\r\n        const handle = await window.showDirectoryPicker(options);\r\n        return new StorageItem(handle);\r\n    }\r\n\r\n    public static async openFileDialog(\r\n        startIn: StorageItem | null, multiple: boolean,\r\n        types: FilePickerAcceptType[] | null, excludeAcceptAllOption: boolean): Promise<StorageItems> {\r\n        const options: OpenFilePickerOptions = {\r\n            startIn: (startIn?.handle ?? undefined),\r\n            multiple,\r\n            excludeAcceptAllOption,\r\n            types: (types ?? undefined)\r\n        };\r\n\r\n        const handles = await window.showOpenFilePicker(options);\r\n        return new StorageItems(handles.map((handle: FileSystemHandle) => new StorageItem(handle)));\r\n    }\r\n\r\n    public static async saveFileDialog(\r\n        startIn: StorageItem | null, suggestedName: string | null,\r\n        types: FilePickerAcceptType[] | null, excludeAcceptAllOption: boolean): Promise<StorageItem> {\r\n        const options: SaveFilePickerOptions = {\r\n            startIn: (startIn?.handle ?? undefined),\r\n            suggestedName: (suggestedName ?? undefined),\r\n            excludeAcceptAllOption,\r\n            types: (types ?? undefined)\r\n        };\r\n\r\n        const handle = await window.showSaveFilePicker(options);\r\n        return new StorageItem(handle);\r\n    }\r\n\r\n    public static async openBookmark(key: string): Promise<StorageItem | null> {\r\n        const connection = await avaloniaDb.connect();\r\n        try {\r\n            const handle = await connection.get(fileBookmarksStore, key);\r\n            return handle && new StorageItem(handle, key);\r\n        } finally {\r\n            connection.close();\r\n        }\r\n    }\r\n\r\n    public static createAcceptType(description: string, mimeTypes: string[]): FilePickerAcceptType {\r\n        const accept: Record<string, string[]> = {};\r\n        mimeTypes.forEach(a => { accept[a] = []; });\r\n        return { description, accept };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
